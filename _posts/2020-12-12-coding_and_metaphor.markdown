---
layout: post
title:      "Coding and Metaphor"
date:       2020-12-12 23:16:30 +0000
permalink:  coding_and_metaphor
---


Something that has stuck out to me during my coding journey is the process of abstraction or trying to map real life relationships and objects on to code. As I sat down to piece together everything I would need to make a Sinatra app: understanding data structures and relationships, using Rake, using ActiveRecord, and understanding class methods and relationships, the importance of understanding abstraction really jumped out to me. Object oriented programming is the ultimate exercise of abstraction. In one of the lectures an instructor talked about using birth and babies to understand the creation of a new instance of a class, and the metaphor stuck with me. A later lesson used the metaphor of cookie cutters to describe class methods (with the individual cookies being an instance). Beyond the metaphors for understanding object oriented programming, metaphors have helped me understand a slew of other coding concepts: inheritance to understand a transfer of functionality, translation to understand ORMs, conversation for internet use, restaurants for understanding MVC functionality (the cook is the model, the waiters the controller, and the views the plates of food themselves delivered to customers). 

I have also been promised that as the journey goes on and we use more metaprogramming, things like Rails will feel like “magic.” As we move forward with coding, it is certainly clear that we are moving up levels in abstraction. There is even a brief blurb on Learn.co that spells this out, and I am beginning to understand this concept more deeply. Real world relationships mirror the ActiveRecord associations we put into our database tables. This real world thinking has been especially useful for understanding more complex relationships such as how an appointment relates to doctors and patients or how a genre relates an artist through a song. Metaphor is even useful for understanding and classifying the RESTful routes and thinking of the functionality of each one. I like to think of the RESTful routes as a nice clearly labeled highway system that lays out roads between our HTTP verbs and our URLs. This abstraction is also important in thinking about how our code interacts with a user. It gives a common language of metaphor and helps us think of how to craft our code logically. As increasing amounts of our lives are digital, metaphor as a way to understand digital and real world relationships becomes increasingly important and relevant, and as someone coming from a language arts background instead of a STEM background, it has helped me to better understand code. 

